# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.29.0"

default_platform :ios

platform :ios do
  before_all do
  end

  lane :install do
    bundle_install
    cocoapods(
      use_bundle_exec: true,
      try_repo_update_on_error: true
    )

    carthage(
      #frameworks: ["MyFramework1", "MyFramework2"],   # Specify which frameworks to archive (only for the archive command)
      #output: "MyFrameworkBundle.framework.zip",      # Specify the output archive name (only for the archive command)
      command: "bootstrap",       # One of: build, bootstrap, update, archive. (default: bootstrap)
      #dependencies: ["Alamofire", "Notice"],# Specify which dependencies to update or build (only for update and build commands)
      use_ssh: true,   # Use SSH for downloading GitHub repositories.
      #use_submodules: false,      # Add dependencies as Git submodules.
      #use_binaries: true,         # Check out dependency repositories even when prebuilt frameworks exist
      #no_build: false,  # When bootstrapping Carthage do not build
      #no_skip_current: false,     # Don't skip building the current project (only for frameworks)
      #verbose: false,   # Print xcodebuild output inline
      platform: "iOS",  # Define which platform to build for (one of ‘all’, ‘Mac’, ‘iOS’, ‘watchOS’, ‘tvOS‘, or comma-separated values of the formers except for ‘all’)
      #configuration: "Release",   # Build configuration to use when building
      #cache_builds: true,         # By default Carthage will rebuild a dependency regardless of whether its the same resolved version as before.
      #toolchain: "com.apple.dt.toolchain.Swift_2_3"   # Specify the xcodebuild toolchain
    )
  end

  lane :build do
    install

    swiftlint(
      mode: :lint, 
      config_file: ".swiftlint.yml",
      executable: "Pods/SwiftLint/swiftlint"
    )

    xcodebuild(
      workspace: "FlexLayout.xcworkspace",
      scheme: "FlexLayout",
      configuration: "Debug",
      build: true,
      clean: true
    )

    #xcodebuild(
    #  workspace: "FlexLayout.xcworkspace",
    #  scheme: "FlexLayoutTVOS",
    #  configuration: "Debug",
    #  build: true,
    #  clean: true
    #)

    xcodebuild(
      workspace: "FlexLayout.xcworkspace",
      scheme: "FlexLayoutSample",
      configuration: "Debug",
      build: true,
      clean: true,
      destination: "generic/platform=iOS\" CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=\""
    )
  end

  lane :tests do
    scan(scheme: "FlexLayout", 
         project: "FlexLayout.xcodeproj")
  end

  lane :doc do 
    jazzy
  end

  lane :travis do
    build
    tests
    pod_lib_lint(allow_warnings: true, verbose: false)
  end

  lane :deploy do
    ensure_git_branch
    version = version_bump_podspec(path: "FlexLayout.podspec")
    git_commit(path: ["./FlexLayout.podspec"], message: "Bumped to version #{version}")
    push_to_git_remote(remote_branch: 'master', force: false, tags: true)
    changelog = changelog_from_git_commits
    github_release = set_github_release(
      repository_name: "layoutBox/FlexLayout",
      api_token: ENV['GITHUB_TOKEN'],
      name: version,
      tag_name: version,
      description: changelog,
      commitish: "master"
    )
    sh("git fetch --tags")
    pod_push(allow_warnings: true, verbose: true)
  end

end
